<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="preference">

	<!-- 전체 선호도 목록 -->
	<select id="preference_list" resultType="com.naver.springbox.dto.PreferenceBean">
	    <![CDATA[
		select * from preference
		]]>
	</select>
	
	<!-- 최신 곡 목록-->
	<select id="recent_music_list" parameterType="Integer" resultType="com.naver.springbox.dto.MusicBean">
	    <![CDATA[
		select * from 
		  (select rownum rnum,music_num,music_genre,music_artist,
		  music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics
		  from (select * from music order by music_publishdate desc))
		  where rnum <= #{count}
		]]>
	</select>
	
	<!-- 추천 대상 곡 목록-->
	<select id="subject_music_list" parameterType="java.util.Map" resultType="com.naver.springbox.dto.MusicBean">
	    <![CDATA[
		select * from 
		  (select rownum rnum,music_num,music_genre,music_artist,
		  music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics
		  from (
          select music_num,music_genre,music_artist,music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics from music
          minus
          select preference.music_num,music_genre,music_artist,music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics from preference, music
          where preference.music_num=music.music_num and preference.user_id = #{userId}
          order by music_publishdate desc
      	  ))
		  where rnum <= #{count}
		]]>
	</select>
	
	<!-- 최신 공연 목록 -->
	<select id="recent_concert_list" parameterType="int" resultType="com.naver.springbox.dto.ConcertBean">
		<![CDATA[
		select * from 
			(select rownum rnum,concert_num,concert_title,concert_place,concert_startdate,concert_enddate,
					  posterfilepath,concert_artist,locationx,locationy,concert_price
					  from (select * from concert order by concert_startdate desc))
		      where rnum <=  #{count}
		]]>
	</select>
	
	
	
	<!-- 선호도(추천) 곡, 공연 관련 SQL 들...  -->
	
	<!-- 선호도 곡 목록의 데이터 개수를 리턴해주는 sql -->
	<select id="count_preference_music_list" resultType="Integer">
		select count(*)	from music
	</select>
	
	<!-- 선호도 공연 목록의 데이터 개수를 리턴해주는 sql -->
	<select id="count_preference_concert_list" resultType="Integer">
		select count(*)	from concert
	</select>
	
	<!-- 선호도 곡 목록-->
	<select id="preference_music_list" parameterType="java.util.Map" resultType="com.naver.springbox.dto.MusicBean">
	    <![CDATA[
		select * from 
		  (select rownum rnum,music_num,music_genre,music_artist,
		  music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics
		  from (select * from music order by music_publishdate desc))
		  where rnum >= #{start} and rnum <= #{end} 
		]]>
	</select>
	
	<!-- 선호도 공연 목록 -->
	<select id="preference_concert_list" parameterType="java.util.Map" resultType="com.naver.springbox.dto.ConcertBean">
		<![CDATA[
		select * from 
			(select rownum rnum,concert_num,concert_title,concert_place,concert_startdate,concert_enddate,
					  posterfilepath,concert_artist,locationx,locationy,concert_price
					  from (select * from concert order by concert_startdate desc))
		      where rnum >= #{start} and rnum <= #{end}
		]]>
	</select>
	
	<!-- 가장 취향이 비슷한 사람을 줄 세우는 쿼리 -->
	<select id="preference_member_list" parameterType="String" resultType="com.naver.springbox.dto.MemberBean">
		<![CDATA[
		select user_id, music_count from(
			select user_id, music_count, rownum rnum from( -- 카운트
			select user_id, count(music_num) as music_count -- 통계
			from preference 
			  where music_num in 
			  (select music_num from preference where user_id = #{userId} and rate >= 3.5)
			  and user_id != #{userId}
			group by user_id
			order by music_count desc)
			) where rnum <= 3
		]]>
	</select>
	
	<!-- 사용자 선호도에 따른 음악 검색 -->
	<select id="preference_music_list2" parameterType="java.util.Map" resultType="com.naver.springbox.dto.MusicBean">
		<![CDATA[
			select * from 
			(select rownum rnum, music_num,music_genre,music_artist,
			music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics from 
			  (select music.music_num,music_genre,music_artist,
			  music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics
			  from 
			  ( -- 음악과 선호도를 조인하면 중복 튜플이 생기므로 조인하기 전에 선호도를 그룹핑한다
			    select music_num from preference
			    where user_id in 
			    ]]> 
				<foreach collection="userList" item="item" open="(" separator="," close=")">
		            #{item}
		        </foreach>
				<![CDATA[ 
			    and rate >= 3.5
			    group by music_num
			  )P, music
			  where P.music_num = music.music_num
			  )
			)
			where rnum >= #{start} and rnum <= #{end}
		]]>
	</select>
	
	<!-- 사용자 선호도에 따른 음악 검색(카운트) -->
	<select id="preference_music_count" parameterType="java.util.Map" resultType="Integer">
		<![CDATA[
			select count(*) from 
			(select rownum rnum, music_num,music_genre,music_artist,
			music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics from 
			  (select music.music_num,music_genre,music_artist,
			  music_title,music_album,music_publishdate,albumcoverfilepath,music_lyrics
			  from 
			  ( -- 음악과 선호도를 조인하면 중복 튜플이 생기므로 조인하기 전에 선호도를 그룹핑한다
			    select music_num from preference
			    where user_id in 
			    ]]> 
				<foreach collection="userList" item="item" open="(" separator="," close=")">
		            #{item}
		        </foreach>
				<![CDATA[ 
			    and rate >= 3.5
			    group by music_num
			  )P, music
			  where P.music_num = music.music_num
			  )
			)
		]]>
	</select>
	
	<!-- [Test] Nested class 가져오기 -->
	<resultMap id="musicResultMap" type="com.naver.springbox.dto.MusicBean">
		<id column="music_num" property="music_num" jdbcType="INTEGER"/>
		<result column="music_genre" property="music_genre" jdbcType="VARCHAR"/>
		<result column="music_artist" property="music_artist" jdbcType="VARCHAR"/>
		<result column="music_title" property="music_title" jdbcType="VARCHAR"/>
		<result column="music_album" property="music_album" jdbcType="VARCHAR"/>
		<result column="music_publishdate" property="music_publishdate" jdbcType="DATE"/>
		<result column="albumcoverfilepath" property="albumcoverfilepath" jdbcType="VARCHAR"/>
		<result column="music_lyrics" property="music_lyrics" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap id="preferenceResultMap" type="com.naver.springbox.dto.PreferenceBean">
		<id column="preference_num" property="preference_num" jdbcType="INTEGER"/>
		<result column="music_num" property="music_num" jdbcType="INTEGER"/>
		<result column="user_id" property="user_id" jdbcType="VARCHAR"/>
		<result column="rate" property="rate" jdbcType="FLOAT"/>
		<association property="music" resultMap="musicResultMap" />
	</resultMap>
	
	<select id="preference_music" resultMap="preferenceResultMap" resultType="com.naver.springbox.dto.PreferenceBean" parameterType="String">
		<![CDATA[
			SELECT p.PREFERENCE_NUM, p.USER_ID, p.RATE, m.MUSIC_NUM, m.MUSIC_GENRE , m.MUSIC_ARTIST, m.MUSIC_TITLE
				, m.MUSIC_ALBUM, m.MUSIC_PUBLISHDATE, m.ALBUMCOVERFILEPATH, m.MUSIC_LYRICS
				FROM PREFERENCE P JOIN MUSIC M
				ON P.MUSIC_NUM = M.MUSIC_NUM
				WHERE USER_ID = #{userId}
		]]>
	</select>
	
	<select id="count_preference_music" resultType="Integer" parameterType="com.naver.springbox.dto.PreferenceBean">
		<![CDATA[
			select count(*) from preference
			where USER_ID = #{user_id} and MUSIC_NUM = #{music_num}
		]]>
	</select>
	
	<select id="count_preference_music_by_user" resultType="Integer" parameterType="String">
		<![CDATA[
			select count(*) from preference
			where USER_ID = #{userId}
		]]>
	</select>
	
	<select id="add_preference_item" parameterType="com.naver.springbox.dto.PreferenceBean">
		<![CDATA[
			insert into preference values
			(preference_seq.nextval, #{music_num}, #{user_id}, #{rate})
		]]>
	</select>
	
	<select id="update_preference_item" parameterType="com.naver.springbox.dto.PreferenceBean">
		<![CDATA[
			update preference set
			rate = #{rate}
			where user_id = #{user_id} and music_num = #{music_num}
		]]>
	</select>
	
	<select id="remove_preference_item" parameterType="com.naver.springbox.dto.PreferenceBean">
		<![CDATA[
			delete from preference
			where user_id = #{user_id} and music_num = #{music_num}
		]]>
	</select>
</mapper>