<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gogaek">

	<!-- blognotice 테이블의 데이터를 notice_date의 내림차순으로 정렬해서 첫번째부터 5개의 데이터를 가져오는 sql -->
	<select id="selectFaqList" resultType="com.naver.springbox.dto.FaqBean">
		select * from (select
		rownum rnum, faq_num, faq_subject, faq_content,
		faq_readcount, faq_date
		from
		(select * from FaqBean order by faq_date desc))
		where rnum &lt;= 10
	</select>

	<!-- 글번호를 매개변수로 받아서 BlogNotice 테이블에서 글번호에 해당하는 데이터의 notice_readcount를 1증가시켜 
		주는 sql -->
	<update id="updateFaq" parameterType="Integer">
		update FaqBean set
		faq_readcount = faq_readcount+1
		where faq_num = #{num}
	</update>

	<!-- 정수를 매개변수로 받아서 blognotice 테이블에서 notice_num에 해당하는 데이터의 모든 컬럼을 NoticeDto 
		타입으로 리턴해주는 sql -->
	<select id="getFaq" parameterType="Integer"
		resultType="com.naver.springbox.dto.FaqBean">
		select * from FaqBean where faq_num = #{num}
	</select>

	<!-- blognotice 테이블에서 가장 큰 notice_num의 값을 리턴해주는 sql -->
	<select id="maxFaqNum" resultType="Integer">
		select max(faq_num) from
		FaqBean
	</select>

	<!-- NoticeDto를 매개변수로 받아서 notice_Num, notice_Subject, notice_Content, notice_Readcount, 
		오늘 날짜를 blognotice 테이블에 삽입하는 sql -->
	<insert id="insertFaq" parameterType="com.naver.springbox.dto.FaqBean">
		insert into FaqBean
		values(#{faq_num},#{faq_subject},
		#{faq_content},#{faq_readcount},
		sysdate)
	</insert>

	<!-- blogboard 테이블의 데이터 개수를 리턴해주는 sql -->
	<select id="countSboardList" resultType="Integer">
		select count(s_num)	from SboardDto
	</select>

	<!-- start와 end의 값을 맵으로 받아서 s_date로 내림차순 정렬한 후 start와 end 번째에 해당하는 데이터를 
		찾아와서 SboardDto 타입으로 리턴해주는 sql -->
	<select id="selectSboardList" parameterType="Integer"
		resultType="com.naver.springbox.dto.SboardDto">
		 <![CDATA[
			
	   select s_num, user_id, s_content, s_readcount, s_date,
		 s_file, s_subject   from
 		(select rownum rnum,s_num, user_id, s_content, s_readcount, s_date,
		 s_file, s_subject from  
	  	 (select * from SboardDto order by s_date desc))
	   		 where rnum >= ((#{page}-1) *  10+1)  and rnum <= (#{page} * 10)
		
		]]>
		<!-- select * from (select rownum rnum, s_num,  user_id,
		 s_content, s_readcount, s_date,
		 s_file, s_subject from(select * from SboardDto order by s_num desc))
		where rnum &gt;=#{start} and rnum &lt;=#{end} -->
	</select>

	<!-- 정수 1개를 받아서 blogboard 테이블에서 board_num과 일치하는 데이터를 찾아서 모든 컬럼을 BoardDto 
		타입으로 리턴하는 sql -->
	<select id="getSboard" parameterType="Integer"
		resultType="com.naver.springbox.dto.SboardDto">
		select * from SboardDto where s_num=#{num}
	</select>

	<!-- 정수 1개를 받아서 blogboard 테이블에서 board_num과 일치하는 데이터를 찾아서 board_readcount 
		값을 1증가시켜 주는 sql -->
	<update id="updateReadcount" parameterType="Integer">
		update SboardDto set
		s_readcount = s_readcount + 1
		where s_num=#{num}
	</update>

	<!-- blogreply 테이블과 blogmember 테이블을 board_id 와 email을 join 한 후 매개변수로 받은 
		정수와 board_num이 일치하는 데이터의 board_id, reply_content, name, image를 찾는 sql -->
	<select id="getReplyList" parameterType="Integer" resultType="java.util.Map">
		select users.user_id, sr_content, name, image
		from SreplyDto, users
		where SreplyDto.user_id = users.user_id
		and s_num = #{num} order by sr_num desc
	</select>

	<!-- blogreply 테이블에 데이터를 삽입 -->
	<!-- blogreply 테이블에서 가장 큰 reply_num 리턴하는 sql -->
	<select id="maxReplyNum" resultType="Integer">
		select max(sr_num) from SreplyDto
	</select>
	<!-- sboardDetail.jsp에서 num을 넘겨줌 -->
	<!-- blogreply 테이블에 데이터를 삽입하는 sql Dto가 없으므로 Map을 이용해서 삽입 -->
	<insert id="insertReply" parameterType="java.util.Map">
		insert into SreplyDto
		values(reply_seq.nextval, #{s_num},#{sr_content},#{user_id})
	</insert>

	<!-- 게시글 삽입을 위한 sql -->
	<!-- blogboard 테이블에서 가장 큰 board_num을 찾아오는 sql -->
	<select id="maxSboardNum" resultType="Integer">
		select max(s_num) from
		SboardDto
	</select>

	<insert id="insertSboard" parameterType="com.naver.springbox.dto.SboardDto">
		insert into
		SboardDto(s_num,user_id,s_subject,s_content,s_file,s_date, s_readcount )values(s_num_seq.nextval,#{user_id},
		#{s_subject},#{s_content},#{s_file,jdbcType=VARCHAR},SYSDATE, 0)
	</insert>


	<!-- Map을 받아서 blogboard 테이블의 데이터를 수정하는 sql -->
	<update id="updateSboard" parameterType="java.util.Map">
		update SboardDto set
		s_subject=#{s_subject}, s_content=#{s_content}, s_file=#{s_file},
		
		where s_num=#{s_num}
	</update>


	<delete id="deleteSboard" parameterType="Integer">
		delete from SboardDto
		where s_num=#{num}
	</delete>

</mapper>  

	
	
	
	













